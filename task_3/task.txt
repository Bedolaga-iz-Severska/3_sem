#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/shm.h>
#include <sys/time.h>
#include <sys/wait.h>

typedef enum {FIF, SHM, MSG} TYPE;

#define atom_sz 1024
#define SIZE 3000000
#define filein "input2.txt"
#define fileout "output.txt"


TYPE type = MSG;


typedef struct {
    long mtype;
    char mtext[SIZE];
} msg_buff;

int main() {

char buff[SIZE];
        int t_size;
        int buf_size = 0;
        srand(time(0));
        int key = rand();
        int FIFO[2];
	int status;


	int forward[2];
	int backward[2];

	pipe(forward);
	pipe(backward);
  pipe(FIFO);

  int pid = fork();
  
  
	if(pid)
	{
		int input = open(filein, O_RDONLY);
		while((t_size = read(input,buff,sizeof(buff)))>0)
                        {
                                buf_size+=t_size;
                        }
                        buf_size--;
	}


        switch(type)
        {
        case FIF:
                if(pid>0)
                {
			                char x[1];
			                x[0]='1';
			                printf("%d\n", buf_size);
                      for(int i = 0; i < buf_size; i += atom_sz)
			                {
			                      write(FIFO[1], &buff[i],i+atom_sz>=buf_size ? (buf_size-i) : atom_sz);
			                }
			                waitpid(pid, &status,0);			
			                return 0;
                }
                else if(pid==0)
                {
			                int i= 0;
			                char x[1];         		
			                while((t_size = read(FIFO[0], &buff[i], atom_sz))>0)
			                {
				                   i+=atom_sz;
				                   buf_size+=t_size;
				                   if(t_size<atom_sz)
					                 break;
			                }
                      int output = open(fileout, O_WRONLY);
		                  //	printf("%s\n",buff);
                      exit(0);
                }



		  case MSG:
			{
       				int message_id;
			      	message_id = msgget(key, IPC_CREAT | 0666);
       				msg_buff MESSAGE;
       				MESSAGE.mtype = 5;
       				if(pid)
              {
           		  	for(int i = 0; i < SIZE; i += atom_sz)
			       	    {
            	    			memcpy(MESSAGE.mtext, &buff[i], atom_sz);
            	   	  		msgsnd(message_id, &MESSAGE, atom_sz, 0);
            			}
			                	waitpid(pid, &status,0);
        	    		      return 0;
    	    		}
        			else 
              {
       			      	for(int i = 0; i < SIZE; i += atom_sz) {
        				    msgrcv(message_id, &MESSAGE, atom_sz, 5, 0);
        	       		memcpy(&buff[i], MESSAGE.mtext, atom_sz);
       		    }
					    //printf("%s\n",buff);
					    exit(0);
       				}
			}
      
      
      
			case SHM:
			{
			  	    char str[1];
			  	    str[0] = '1';
			      	char *shm_ptr = shmat(shmget(key, atom_sz, IPC_CREAT | 0600), NULL, 0);
			        if(pid)
			       	{
 			          	for(int i = 0; i < SIZE; i += atom_sz)
				        	{
						            memcpy(shm_ptr, &buff[i], atom_sz);
					             	write(forward[1], str, 1);
						            read(backward[0], str,1);
        				  }
		            	    	waitpid(pid, &status,0);
		                    return 0;

			        }

				      else {
 				          for(int i = 0; i < SIZE; i += atom_sz)
					        {
						            read(forward[0], str, 1);
        				       	memcpy(&buff[i], shm_ptr, atom_sz);
						            write(backward[1], str,1);
					        }
						     //printf("%s\n",buff);
					        exit(0);
       }
			   }
     }
} 
