/*
Write a duplex pipe implementation.
typedef struct {
  int txd[2]; 
  int rxd[2]; 
} dpipe_t;
1) This pipe should connect some process with his child, for continuous communication.
2) Be careful with opened descriptors.
3) Monitor the integrity of transmitted data.
4) When one process is terminated, the other should also exit.

*/




#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>


typedef struct
{
	int ffd[2];
	int bfd[2];
} fdpipe_t; 

#define SIZE 20




char* Transversion(char* buf, int size)
{
	char* temp = (char*)malloc((size+1)*sizeof(char));
	for (int i=0; i<size; i++)
	{
		temp[i] = buf[size-1-i];
	}
	temp[size] = '\0';
	return temp;
}


void Free(char* buf)
{
	free(buf);
}


void Procedure(int fd, char* buf, int size)
{
        printf("Recieved from parent: %s\n", buf);
        char* temp_buf = Transversion(buf, size);
	       printf("Send back to parent: %s\n", temp_buf);
        write(fd, temp_buf, size);
        Free(temp_buf);
	return;
}



int main()
{
	char buf1[SIZE];
	char buf2[SIZE];
	int size1;
	int size2;
	fdpipe_t fd;
	int status;

	if(pipe(fd.ffd) < 0)
	{
		perror("Pipe_Creation_Failed");
		return -1;
	}

	if(pipe(fd.bfd) < 0)
        {
        	perror("Pipe_Creation_Failed");
                return -1;
        }


	const pid_t pid = fork();
	if (pid<0)
	{
		perror("Fork_Creation_Failed");
		return -1;
	}
	



	if (pid>0)
	{
		close(fd.ffd[0]);
		close(fd.bfd[1]);

		while(1)
		{
			while((size1 = read(0,buf1,sizeof(buf1)-1))>1)
			{	
				if(buf1[size1-1] == '\n')
				size1--;
				buf1[size1] = '\0';
				write(fd.ffd[1], buf1, size1);
				if(!strcmp(buf1,"exit"))
                                {
					waitpid(pid, &status, 0);
					printf("Exit code: %d\n", WEXITSTATUS(status));
					return 0;
                                }
				printf("Send to Child: %s\n", buf1);
				if(size1 < SIZE-1) 
					break;	
			}
			write(fd.ffd[1], "\n", 1);
			while(1)
                        {
                                size2 = read(fd.bfd[0], buf2, sizeof(buf2)-1);
                                buf2[size2] = '\0';
                                if(buf2[size2-1] == '\n')
                                {
                                        if(size2==1)
                                                break;
                                        buf2[size2-1] = '\0';
                                        printf("Recieved back from child: %s\n", buf2);
                                        break;
                                }
                                printf("Recieved back from child: %s\n", buf2);
                        }
				
		}
	}




	else
	{	
		close(fd.ffd[1]);
		close(fd.bfd[0]);
		while (1)
		{
			while(1)
			{
				size1 = read(fd.ffd[0], buf1, sizeof(buf1)-1);
				buf1[size1] = '\0';
				if(!strcmp(buf1,"exit"))
					exit(1);
				if(buf1[size1-1] == '\n')
				{
					if(size1==1)
						break;
					buf1[size1-1] = '\0';
					Procedure(fd.bfd[1], buf1, size1-1);
					break;
				}
				Procedure(fd.bfd[1], buf1, size1);
			}
			write(fd.bfd[1], "\n", 1);

		}
	}
}

